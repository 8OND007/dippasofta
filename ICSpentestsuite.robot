***Settings***
Library         Process
Library         Collections
Library         ./NVDsearch.py
Library         ./profinetscanner.py
Library         ./cotpquery.py
Library         ./S7-1200-Workshop.py

***Variables***
${TARGET}           Profinet
${WAITTIME}         2
${ETH_INTERFACE}    enx0050b66b034c
${IP}               192.168.250.129
@{IP_LIST}

***Test Cases***
# Be noted that some of the used scripts need administrative priviledges to run.

#MyTestCase1                        
    #Search and display vulnerabilities
    #read_S7_1200_parameters             ${IP}
    #log     ${RESULT.stdout}
MyProfinetTestCase
    #Search and display vulnerabilities
    Scan for profinet devices
    Query COTP


***Keywords***
Search and display vulnerabilities
    [Documentation]     Runs online search for vulnerabilities with given parameter.
    ...                 Opens website with two tabs, one for the search and one for statistics on that search.
    Search from NVD database    ${TARGET}


Scan for profinet devices
    [Documentation]     Runs PROFINET scanner as a python module. Note: Needs administrative priviledges to run.
    ...                 Logs the results with warning level to see the results in console and log.
    ...                 Saves the IP addresses of found devices for further operations.
    ${resultDict}=      run_profinet_scanner    ${ETH_INTERFACE}
    log_results         ${resultDict}           ${TRUE}
    # Add: handling for empty result
    # Add: termination for too long scan
    Save found IP addresses                     ${resultDict}

Query COTP
    [Documentation]     Sends COTP query to specified IP, which Siemens devices can respond with additional information.
    Send COTP query         ${IP_LIST}[0]

Run Profinet scanner externally
    [Documentation]     Runs PROFINET scanner as an external program like from commandprompt.
    ...                 Logs the output at WARN level to output stdout to both log and console.
    Start Process       python  ./profinetscanner.py       -i ${ETH_INTERFACE}
    ${result}           Wait For Process                    timeout=${WAITTIME}      on_timeout=terminate
    Should be equal as integers     ${result.rc}            0
    log                             ${result.stdout}        WARN    

Save found IP addresses
    [Documentation]     Saves IP addresses in multi-level dict to an array.
    [Arguments]         ${IP_dict}
    FOR     ${Key}    IN      @{IP_dict}
            ${Inner_dict}=      Get From Dictionary     ${IP_dict}           ${Key}
            ${IP}=              Get From Dictionary     ${Inner_dict}       ip_address
            Append To List      ${IP_LIST}              ${IP}
    END    
